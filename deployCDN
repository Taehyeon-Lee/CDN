#!/bin/bash

# ./deployCDN -p 20030 -o cs5700cdnorigin.ccs.neu.edu:8080 -n cs5700cdn.example.com -u promised_lan -i ~/.ssh/id_ed25519.pub

# Define the options and their arguments
while getopts ":p:o:n:u:i:" opt; do
  case $opt in
    p)
      port="$OPTARG"
      ;;
    o)
      origin="$OPTARG"
      ;;
    n)
      name="$OPTARG"
      ;;
    u)
      username="$OPTARG"
      ;;
    i)
      keyfile="$OPTARG"
      ;;
    \?) # invalid option is encountered
      # an error message is printed and the script exits with a non-zero status code
      echo "Invalid option: -$OPTARG" >&2
      echo 'Run with: "./deployCDN -p <port number> -o <origin server name> -n <CDN domain name> -u <username> -i <path to public key>"'
      exit 1
      ;;
    :) # When an option requires an argument but none is provided
      # an error message is printed and the script exits with a non-zero status code
      echo "Option -$OPTARG requires an argument." >&2
      echo 'Run with: "./deployCDN -p <port number> -o <origin server name> -n <CDN domain name> -u <username> -i <path to public key>"'
      exit 1
      ;;
  esac
done

# Process the options and their arguments
echo "port = $port"
echo "origin = $origin"
echo "name = $name"
echo "username = $username"
echo "keyfile = $keyfile"
echo "[+] Parsed all arguments"
echo ""


######################## http server deployment ############################
echo "[+] http server deployment in progress"
echo "preparing caches... this make take a few minutes..."
echo ""

# copy http server file into the cloud
function setup_http_servers() {
  machine=$1

  echo "[+] Copying the file to the cloud now"
  scp -i $keyfile httpserver $username@$machine:/home/$username
  # add prep cache and url files
  scp -i $keyfile prepare_http_cache.py $username@$machine:/home/$username
  scp -i $keyfile urls.txt $username@$machine:/home/$username


  echo "[+] ssh to replica"
  ssh -i $keyfile $username@$machine << EOF
    echo "[+] logged into replica"

    echo "[+] changing mod and ff"
    sed -i 's/\r$//' httpserver && chmod +x httpserver

    echo "preparing cache... this make take a few minutes..."
    python3 prepare_http_cache.py

    echo "[+] $machine cache is ready"

    exit
EOF
}

sleep 5

setup_http_servers "cdn-http6.5700.network" > /dev/null 2>&1 &
setup_http_servers "cdn-http2.5700.network" > /dev/null 2>&1 &
setup_http_servers "cdn-http7.5700.network" > /dev/null 2>&1 &
setup_http_servers "cdn-http5.5700.network" > /dev/null 2>&1 &
setup_http_servers "cdn-http3.5700.network" > /dev/null 2>&1 &
setup_http_servers "cdn-http4.5700.network" > /dev/null 2>&1 &
setup_http_servers "cdn-http1.5700.network" > /dev/null 2>&1 &

disown

######################## dns server deployment ############################
echo "[+] DNS server deployment in progress"
# copy DNS server file into the cloud
echo "[+] Copying the file to the cloud now"
scp -i $keyfile dnsserver $username@cdn-dns.5700.network:/home/$username
scp -i $keyfile get_replica_geo $username@cdn-dns.5700.network:/home/$username
scp -i $keyfile scamper_ping.py $username@cdn-dns.5700.network:/home/$username
scp -i $keyfile replica_coordinates.csv $username@cdn-dns.5700.network:/home/$username


echo "[+] ssh to do chmod the file"
ssh -i $keyfile $username@cdn-dns.5700.network << EOF
  echo "[+] logged into the cloud and now chmoding the file"

  sed -i 's/\r$//' get_replica_geo && chmod +x get_replica_geo
  sed -i 's/\r$//' scamper_ping.py && chmod +x scamper_ping.py
  sed -i 's/\r$//' dnsserver && chmod +x dnsserver

  echo "[+] Chmod done now logging out"

  exit
EOF

echo "Please stand by..."

sleep 50

echo "[+] dns server deployment is done"
echo ""
echo "[+] HTTP and DNS deployment is complete!"

exit
